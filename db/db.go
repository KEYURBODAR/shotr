// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addClickStmt, err = db.PrepareContext(ctx, addClick); err != nil {
		return nil, fmt.Errorf("error preparing query AddClick: %w", err)
	}
	if q.addLinkStmt, err = db.PrepareContext(ctx, addLink); err != nil {
		return nil, fmt.Errorf("error preparing query AddLink: %w", err)
	}
	if q.getDailyClicksStmt, err = db.PrepareContext(ctx, getDailyClicks); err != nil {
		return nil, fmt.Errorf("error preparing query GetDailyClicks: %w", err)
	}
	if q.getLinkStmt, err = db.PrepareContext(ctx, getLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetLink: %w", err)
	}
	if q.getLinkStatsStmt, err = db.PrepareContext(ctx, getLinkStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetLinkStats: %w", err)
	}
	if q.saveDailyClicksStmt, err = db.PrepareContext(ctx, saveDailyClicks); err != nil {
		return nil, fmt.Errorf("error preparing query SaveDailyClicks: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addClickStmt != nil {
		if cerr := q.addClickStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addClickStmt: %w", cerr)
		}
	}
	if q.addLinkStmt != nil {
		if cerr := q.addLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addLinkStmt: %w", cerr)
		}
	}
	if q.getDailyClicksStmt != nil {
		if cerr := q.getDailyClicksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDailyClicksStmt: %w", cerr)
		}
	}
	if q.getLinkStmt != nil {
		if cerr := q.getLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLinkStmt: %w", cerr)
		}
	}
	if q.getLinkStatsStmt != nil {
		if cerr := q.getLinkStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLinkStatsStmt: %w", cerr)
		}
	}
	if q.saveDailyClicksStmt != nil {
		if cerr := q.saveDailyClicksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing saveDailyClicksStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	addClickStmt        *sql.Stmt
	addLinkStmt         *sql.Stmt
	getDailyClicksStmt  *sql.Stmt
	getLinkStmt         *sql.Stmt
	getLinkStatsStmt    *sql.Stmt
	saveDailyClicksStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		addClickStmt:        q.addClickStmt,
		addLinkStmt:         q.addLinkStmt,
		getDailyClicksStmt:  q.getDailyClicksStmt,
		getLinkStmt:         q.getLinkStmt,
		getLinkStatsStmt:    q.getLinkStatsStmt,
		saveDailyClicksStmt: q.saveDailyClicksStmt,
	}
}
