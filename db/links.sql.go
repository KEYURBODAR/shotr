// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: links.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addClick = `-- name: AddClick :exec
UPDATE links SET clicks = clicks + ? WHERE slug = ?
`

type AddClickParams struct {
	Clicks sql.NullInt64 `json:"clicks"`
	Slug   string        `json:"slug"`
}

func (q *Queries) AddClick(ctx context.Context, arg AddClickParams) error {
	_, err := q.exec(ctx, q.addClickStmt, addClick, arg.Clicks, arg.Slug)
	return err
}

const addLink = `-- name: AddLink :one
INSERT INTO links (slug, url, user, created_at, clicks)
VALUES (?1, ?2, ?3, datetime('now'), 0)
RETURNING id, slug, url, user, created_at, clicks
`

type AddLinkParams struct {
	Slug string         `json:"slug"`
	Url  string         `json:"url"`
	User sql.NullString `json:"user"`
}

func (q *Queries) AddLink(ctx context.Context, arg AddLinkParams) (Link, error) {
	row := q.queryRow(ctx, q.addLinkStmt, addLink, arg.Slug, arg.Url, arg.User)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Url,
		&i.User,
		&i.CreatedAt,
		&i.Clicks,
	)
	return i, err
}

const getDailyClicks = `-- name: GetDailyClicks :many
SELECT day, clicks
FROM daily_clicks
WHERE slug = ?1
  AND day >= date('now','-6 days')
ORDER BY day ASC
`

type GetDailyClicksRow struct {
	Day    time.Time     `json:"day"`
	Clicks sql.NullInt64 `json:"clicks"`
}

func (q *Queries) GetDailyClicks(ctx context.Context, slug string) ([]GetDailyClicksRow, error) {
	rows, err := q.query(ctx, q.getDailyClicksStmt, getDailyClicks, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDailyClicksRow
	for rows.Next() {
		var i GetDailyClicksRow
		if err := rows.Scan(&i.Day, &i.Clicks); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLink = `-- name: GetLink :one
SELECT id, slug, url, user, created_at, clicks
FROM links
WHERE slug = ?
`

func (q *Queries) GetLink(ctx context.Context, slug string) (Link, error) {
	row := q.queryRow(ctx, q.getLinkStmt, getLink, slug)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Url,
		&i.User,
		&i.CreatedAt,
		&i.Clicks,
	)
	return i, err
}

const getLinkStats = `-- name: GetLinkStats :one
SELECT id, slug, url, user, created_at, clicks
FROM links
WHERE slug = ?1
`

func (q *Queries) GetLinkStats(ctx context.Context, slug string) (Link, error) {
	row := q.queryRow(ctx, q.getLinkStatsStmt, getLinkStats, slug)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Url,
		&i.User,
		&i.CreatedAt,
		&i.Clicks,
	)
	return i, err
}

const saveDailyClicks = `-- name: SaveDailyClicks :exec
INSERT INTO daily_clicks (slug, day, clicks)
VALUES (?, date('now'), ?)
ON CONFLICT(slug, day) DO UPDATE SET clicks = clicks + excluded.clicks
`

type SaveDailyClicksParams struct {
	Slug   string        `json:"slug"`
	Clicks sql.NullInt64 `json:"clicks"`
}

func (q *Queries) SaveDailyClicks(ctx context.Context, arg SaveDailyClicksParams) error {
	_, err := q.exec(ctx, q.saveDailyClicksStmt, saveDailyClicks, arg.Slug, arg.Clicks)
	return err
}
